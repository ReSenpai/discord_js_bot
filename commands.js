const regex = require('./regex')
const { Attachment, RichEmbed, Emoji, Guild, Client } = require('discord.js');
const bj = require('./blackjack');
const queries = require('./queries');

async function executeCommand(message, user, query) {
    // Buy questions guide
    if (regex.buy_question.test(message.content)) {
        console.log(`Noda / MSG / HM / Buy question info`);
        const shop = new RichEmbed()
            .setTitle(`–ù–æ–¥–∞-—à–æ–ø!`)
            .setColor(0xebe134)
            .setDescription(`
            –í–∞—à –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç: ${user.coins}
            –ö—É–ø–∏—Ç—å –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å: 25 —á–µ–∫–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
            –ö—É–ø–∏—Ç—å –ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å: 100 —á–µ–∫–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç

            –î–ª—è –ø–æ–∫—É–ø–∫–∏ –æ–±—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ: !–æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å
            –î–ª—è –ø–æ–∫—É–ø–∫–∏ –ª–∏—á–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ: !–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å
            `);
        message.channel.send(shop);
    // Buy common_questions guide
    } else if (regex.buy_common_question.test(message.content)) {
        console.log(`Noda / MSG / HM / Buy common question info`);
        if(user.coins >= 25){
            const commonQuestion = new RichEmbed()
            .setTitle(`–ü–æ–∫—É–ø–∫–∞ –æ–±—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.`)
            .setColor(0xebe134)
            .setDescription(`
            –í–∞—à –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç: ${user.coins}
            –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ –ª—É—á—à–µ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–∞–∫ —à–∞–±–ª–æ–Ω:
            !–≤–æ–ø—Ä–æ—Å [–¢—É—Ç –ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ—á–∫–∞—Ö] [–ê —Ç—É—Ç –≤–∞—à –æ—Ç–≤–µ—Ç, —Ç–∞–∫ –∂–µ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ—á–∫–∞—Ö]
            `);
            message.channel.send(commonQuestion);
        } else {
            const commonQuestionFalse = new RichEmbed()
            .setTitle(`–û—Ç–∫–∞–∑–∞–Ω–æ.`)
            .setColor(0xFF0000)
            .setDescription(`
            –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —á–µ–∫–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç, –≤–∞—à –±–∞–ª–∞–Ω—Å: ${user.coins}
            `);
            message.channel.send(commonQuestionFalse);
        }  
    // Buy personal_question guide 
    } else if (regex.buy_personal_question.test(message.content)) {
        console.log(`Noda / MSG / HM / Buy personal question info`);
        if(user.coins >= 100){
            let plate = new RichEmbed()
            .setTitle(`–ü–æ–∫—É–ø–∫–∞ –ª–∏—á–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.`)
            .setColor(0xebe134)
            .setDescription(`
            –í–∞—à –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç: ${user.coins}
            –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ –ª—É—á—à–µ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–∞–∫ —à–∞–±–ª–æ–Ω:
            !–≤–æ–ø—Ä–æ—Å [–¢—É—Ç –ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ—á–∫–∞—Ö] [–ê —Ç—É—Ç –≤–∞—à –æ—Ç–≤–µ—Ç, —Ç–∞–∫ –∂–µ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ—á–∫–∞—Ö] [–ª–∏—á–Ω—ã–π]
            `);
            message.channel.send(plate);
        } else {
            let plate_false = new RichEmbed()
            .setTitle(`–û—Ç–∫–∞–∑–∞–Ω–æ.`)
            .setColor(0xFF0000)
            .setDescription(`
            –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —á–µ–∫–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç, –≤–∞—à –±–∞–ª–∞–Ω—Å: ${user.coins}
            `);
            message.channel.send(plate_false);
        }  
    // buy questions with code
    } else if (regex.just_question.test(message.content)) {
        console.log(`Noda / MSG / HM / BQ / Buy a question!`);
        let args = message.content.split(" [");
        if (user.coins >= 25 && args.length >= 2) {
            console.log(`Noda / MSG / HM / BQ / Enough money for a common question and the question has proper structure`);
            user.question = args[1].slice(0, -1);
            user.answer = args[2].slice(0, -1);
            try {
                user.question_type = args[3].slice(0, -1);
            } catch (error) {
                user.question_type = 0;
            }
            console.log(`Noda / MSG / HM / BQ / Question type ${user.question_type}`);
            if (regex.personal_question.test(user.question_type)) {
                if (user.coins >= 100) {
                    console.log(`Noda / MSG / HM / BQ / Personal question was bought`);
                    user.question_type = 1;
                    user.coins -= 100;
                } else {
                    console.log(`Noda / MSG / HM / BQ / Not enough money for personal question`);
                    bot.send(`–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —á–µ–∫–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ª–∏—á–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${user.coins} –º–æ–Ω–µ—Ç!`)
                    return;
                }
            } else if (user.question_type === 0 || common_question.test(user.question_type)) {
                console.log(`Noda / MSG / HM / BQ / Common question was bought`);
                user.question_type = 0;
                user.coins -= 25;
            } else {
                console.log(`Noda / MSG / HM / BQ / Incorrect question type`);
                let plate = new RichEmbed()
                .setTitle(`–û—à–∏–±–∫–∞`)
                .setColor(0xFF0000)
                .setDescription(`
                –í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞.
                –î–ª—è –ø–æ–∫—É–ø–∫–∏ –ª–∏—á–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –≤ –∫–æ–Ω—Ü–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–æ–ø–∏—à–∏—Ç–µ [–ª–∏—á–Ω—ã–π].
                –î–ª—è –ø–æ–∫—É–ø–∫–∏ –æ–±—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –º–æ–∂–Ω–æ –≤–æ–æ–±—â–µ –Ω–µ –ø–∏—Å–∞—Ç—å —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ [–æ–±—â–∏–π]
                `)
                bot.send(plate);
                return;
            }
            user.questions += 1;
            console.log(`Noda / MSG / HM / BQ / Q: '${user.question}', A: '${user.answer}', T: '${user.question_type}'`);
            const commonQuestionBye = new RichEmbed()
            .setTitle(`–ü–æ–∫—É–ø–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞.`)
            .setColor(0x36D904)
            .setDescription(`
            –í–∞—à –≤–æ–ø—Ä–æ—Å: ${user.question}
            –í–∞—à –æ—Ç–≤–µ—Ç: ${user.answer}
            –¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞: ${user.question_type === 0 ? '–æ–±—â–∏–π' : '–ª–∏—á–Ω—ã–π'}
            –û—Å—Ç–∞–ª–æ—Å—å —á–µ–∫–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç: ${user.coins}
            –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—èüòò
            `);
            message.channel.send(commonQuestionBye);
        } else {
            console.log(`Noda / MSG / HM / Not enough money for a common question`);
            message.channel.send(`${args.length >= 2 ? '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —á–µ–∫–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç, –≤–∞—à –±–∞–ª–∞–Ω—Å:' + user.coins : '–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–ª–∏ —à–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–æ–ø—Ä–æ—Å–∞, –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã, –Ω–∞–ø–∏—Å–∞–≤ "!–∫—É–ø–∏—Ç—å –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å" –∏–ª–∏ "!–∫—É–ø–∏—Ç—å –ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å"'}`);
        }
    // Show profiles
    } else if (regex.show_profile.test(message.content)) {
        console.log(`Noda / MSG / HM / Show profiles`);
        try {
            let embed = new RichEmbed()
            .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞: ${user.server_name}`)
            .setColor(0x0a4bff)
            .setDescription(`
            :trophy:LVL: ${user.lvl}
            :jigsaw:XP: ${user.exp}
            :moneybag:–ß–µ–∫–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç: ${user.coins}
            :key:–û–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∫—É–ø–ª–µ–Ω–æ: ${user.questions}
            `)
            .setThumbnail(user.avatar)
            message.channel.send(embed);
        } catch (error) {
            let embed = new RichEmbed()
            .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞: ${user.user_name}`)
            .setColor(0x0a4bff)
            .setDescription(`
            :trophy:LVL: ${user.lvl}
            :jigsaw:XP: ${user.exp}
            –ß–µ–∫–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç: ${user.coins} :moneybag:
            :key:–û–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∫—É–ø–ª–µ–Ω–æ: ${user.questions}
            `)
            .setThumbnail(user.avatar)
            message.channel.send(embed);
        }
    // Throw a cube
    } else if (regex.cube.test(message.content)) {
        console.log(`Noda / MSG / HM / Throw a cube`);
        message.channel.send(Math.ceil(Math.random() * 10)); 
    } else if (regex.money.test(message.content)) {
        console.log(`Noda / MSG / HM / QN / Give some coins`);
        // give 100 coins
        user.coins += 100;
        let pushCoins = new RichEmbed()
        .setTitle(`–ó–∞–ø—Ä–æ—Å —Ö–∞–ª—è–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç–æ–∫`)
        .setColor(0x36D904)
        .setDescription(`
        –î–µ—Ä–∂–∏ 100 –º–æ–Ω–µ—Ç–æ–∫ :moneybag:
        –ß–µ–∫–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç: ${user.coins} 
        `);
        message.channel.send(pushCoins);
    // Blackjack
    } else if (/^!bj|^!–±–∂/i.test(message.content)) {
        console.log('Noda / MSG / BJ');
        if (/^!bj$|^!–±–∂$/i.test(message.content)) {
            const bj_error = new RichEmbed()
            .setTitle(':x: –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤')
            .setColor(0xEF5350)
            .setDescription('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`!–±–∂ —Å—Ç–∞–≤–∫–∞ 25\`\n\n–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–π')
            message.channel.send(bj_error);
        } else {
            try {
                const bj_data = await query(queries.sql_get_bj_state, [user.uid]);
                let state = {};
                try {
                    state = JSON.parse(bj_data[0]['state']);
                } catch (error) {
                    state = {};
                }
                let words = message.content.split(' ');
                let cmd = words[1];
                let num = words.length==3?parseInt(words[2]):-1;
                let turn = bj(cmd, num, state, user.coins);
                user.coins = turn.coins;
                let stateJSON = JSON.stringify(turn.state);
                query(queries.sql_upd_bj_state, [user.uid, stateJSON, stateJSON]);
                let bj_message = new RichEmbed();
                    if (turn.result_value === 0 || turn.result_value === 1) {
                        bj_message = new RichEmbed()
                        .setTitle(true ? `–ë–ª—ç–∫–¥–∂–µ–∫ | ${user.server_name === null ? user.user_name : user.server_name}` : 'Black Jack with Noda')
                        .setColor(turn.color)
                        .setDescription(`${turn.result_value === 0 ? turn.command : turn.result}`)
                        .addField(turn.noda_hand, turn.noda_hand_cards, true)
                        .addField(turn.you_hand, turn.you_hand_cards, turn.result_value === 0 ? true : false)
                        .setFooter(turn.footer);
                    } else if (turn.result_value === 2) {
                        bj_message = new RichEmbed()
                        .setTitle(':x: –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç')
                        .setColor(0xEF5350)
                        .setDescription(`–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–≤—ã—Å–∏–ª–∞ —Ä–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${user.coins}`)
                        .setFooter(turn.footer);
                    } else if (turn.result_value === 3) {
                        bj_message = new RichEmbed()
                        .setTitle(':x: –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç')
                        .setColor(0xEF5350)
                        .setDescription(`–£ –≤–∞—Å –≤ –∫–æ—à–µ–ª—å–∫–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è —É–¥–≤–æ–µ–Ω–∏—è\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${user.coins}`)
                        .setFooter(turn.footer);
                    } else if (turn.result_value === 4) {
                        bj_message = new RichEmbed()
                        .setTitle(':x: –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤')
                        .setColor(0xEF5350)
                        .setDescription(`–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`!–±–∂ —Å—Ç–∞–≤–∫–∞ 25\`\n\n–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–π`)
                    } else if (turn.result_value === 5) {
                        bj_message = new RichEmbed()
                        .setTitle('–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã')
                        .setColor(0x202225)
                        .setDescription(`–¶–µ–ª—å –∏–≥—Ä—ã - –Ω–∞–±—Ä–∞—Ç—å 21 –æ—á–∫–æ –∏–ª–∏ –Ω–∞–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –æ—á–∫–æ–≤,
                                        —á–µ–º –ù–æ–¥–∞, –Ω–æ –Ω–µ –±–æ–ª—å—à–µ 21.\n
                                        –í –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã –≤–∞–º –≤ —Ä—É–∫—É –ø—Ä–∏—Ö–æ–¥—è—Ç 2 –∫–∞—Ä—Ç—ã, –∞ –≤ —Ä—É–∫—É –ù–æ–¥—ã
                                        –æ–¥–Ω–∞. –ò–º–µ–Ω–Ω–æ –Ω–∞ —ç—Ç–æ–º —Ö–æ–¥—É –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–≤–æ–∏—Ç—å —Å–≤–æ—é —Å—Ç–∞–≤–∫—É,
                                        –Ω–∞–ø–∏—Å–∞–≤ \`!–±–∂ —É–¥–≤–æ–∏—Ç—å\`. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–¥–∞–µ—Ç —Ö–æ–¥
                                        –ù–æ–¥–µ –∏ –µ–≥–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã.\n
                                        –ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–≤–∞–∏–≤–∞—Ç—å, –º–æ–∂–µ—Ç–µ –¥–æ–±—Ä–∞—Ç—å –µ—â–µ –∫–∞—Ä—Ç—É,
                                        –Ω–∞–ø–∏—Å–∞–≤ \`!–±–∂ –µ—â–µ\`.\n
                                        –ö–æ–≥–¥–∞ –≤—ã –Ω–∞–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç, –Ω–∞ –≤–∞—à –≤–∑–≥–ª—è–¥,
                                        –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å —Ö–æ–¥ –Ω–æ–¥–µ, –Ω–∞–ø–∏—Å–∞–≤ \`!–±–∂ —Ö–≤–∞—Ç–∏—Ç\`.\n
                                        –í—ã —Ç–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∏–≥—Ä—ã, –¥–æ –µ—ë –∫–æ–Ω—Ü–∞,
                                        –∑–∞–±—Ä–∞—Ç—å –ø–æ–ª–æ–≤–∏–Ω—É –≤–∞—à–µ–π —Å—Ç–∞–≤–∫–∏ - \`!–±–∂ –ø–∞—Å—Å\`. `)
                    }
                message.channel.send(bj_message);
            } catch (error) {
                console.log('Noda / MSG / BJ / Error');
                console.log(error);
            }
        }
    } else if (regex.help.test(message.content)) {
        let help_desk = new RichEmbed()
        .setTitle(`–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞`)
        .setColor(0x36D904)
        .setDescription(`
        –ù–æ–¥–∞ - –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–æ—Ç—É 
        !–ø—Ä–æ—Ñ–∏–ª—å - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —É –Ω–æ–¥—ã
        !–∫—É–±–∏–∫ - –∫–∏–Ω—É—Ç—å –∫–æ—Å—Ç–∏ –æ—Ç 1 –¥–æ 10
        !–º–æ–Ω–µ—Ç–∫–∏ - –ø–æ–ª—É—á–∏—Ç—å 100 –º–æ–Ω–µ—Ç–æ–∫(–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–µ—Ä–æ–≤)
        !–∫—É–ø–∏—Ç—å –≤–æ–ø—Ä–æ—Å - –∑–∞–π—Ç–∏ –≤ —à–æ–ø, –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
        !–æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å - –≥–∞–π–¥ –ø–æ –ø–æ–∫—É–ø–∫–µ –æ–±—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        !–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å - –≥–∞–π–¥ –ø–æ –ø–æ–∫—É–ø–∫–µ –ª–∏—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        !–±–∂ - –∏–≥—Ä–∞—Ç—å –≤ –±–ª—ç–∫–¥–∂–µ–∫ —Å –Ω–æ–¥–æ–π
        `);
        message.channel.send(help_desk);
    } else {
        message.channel.send('–ù–µ –Ω–∞–¥–æ –º–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–≤–∞—Ç—å, –æ–∫–µ–π?!');
    }
}

module.exports.exec = executeCommand;