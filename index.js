// queries
const sql_add_user = 
`INSERT IGNORE INTO users (user_id, user_name, server_name)
    VALUES (?, ?, ?)`;

const sql_get_user_info =
`SELECT * FROM users
    WHERE user_id = ?`;

const sql_upd_user_info = 
`UPDATE users
    SET coins = ?, exp = ?, lvl = ?, questions = ?
    WHERE user_id = ?`;

const sql_add_question = 
`INSERT INTO questions (text)
    VALUES (?)`;
                            
const sql_add_answer = 
`INSERT INTO answers (text)
    VALUES (?)`;

const sql_connect_question = 
`INSERT INTO conn_quest_ans (question_id, answer_id, user_id, type)
    VALUES (?, ?, ?, ?);`;

const sql_find_question = 
`SELECT questions.text AS question, answers.text AS answer, type, 
    MATCH (questions.text) AGAINST (? IN BOOLEAN MODE) AS score 
    FROM questions 
    JOIN conn_quest_ans USING (question_id) 
    JOIN answers USING (answer_id) 
    ORDER BY score DESC LIMIT 100`;

// require
const Discord = require('discord.js');
const config = require('./config.json');
const fs = require('fs');
const mysql = require('mysql');
const util = require('util');
const { Attachment, RichEmbed, Emoji, Guild, Client } = require('discord.js');

// bot vars
const bot = new Discord.Client();
bot.commands = new Discord.Collection();
const token = config.token;
const prefix = config.prefix;

// login bot
bot.login(token);

// require modules
fs.readdir('./modules/',(err,files)=>{
    if(err) console.log(err);
    let jsfiles = files.filter(f => f.split(".").pop() === "js");
    if(jsfiles.length <=0) console.log("–ù–µ—Ç –∫–æ–º–º–∞–Ω–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏!!");
    console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${jsfiles.length} –∫–æ–º–º–∞–Ω–¥`);
    jsfiles.forEach((f,i) =>{
        let props = require(`./modules/${f}`);
        console.log(`${i+1}.${f} –ó–∞–≥—Ä—É–∂–µ–Ω!`);
        for(let i = 0; i < props.help.name.length; i++){
            bot.commands.set(props.help.name[i],props);
        }
    });
});

// Regex
const buy_question = new RegExp(prefix + '\\–∫—É–ø–∏—Ç—å –≤–æ–ø—Ä–æ—Å$','i');
const buy_common_question = new RegExp(prefix + '\\–∫—É–ø–∏—Ç—å –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å$','i');
const just_question = new RegExp(prefix + '\\–≤–æ–ø—Ä–æ—Å','i');
const show_profile = new RegExp(prefix + '\\–ø—Ä–æ—Ñ–∏–ª—å$|^–Ω–æ–¥–∞ –ø–æ–∫–∞–∂–∏ –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å','i');

// bot.on('ready', async () => {
//     console.log(`–ù–æ–¥–∞ —Ç—è–Ω –∑–∞–ø—É—â–µ–Ω–∞`);
//     bot.generateInvite(["ADMINISTRATOR"]).then(link => {
//         console.log(link);
//     }).catch(err => {
//         console.log(err.stack);
//     })
// });

// stemming
// npm i natural
var natural = require('natural');
var tokenizer = new natural.WordTokenizer();
function stemming(str) {
    let words = tokenizer.tokenize(str);
    let stems = [];
    for (word of words) {
        stems.push(natural.PorterStemmerRu.stem(word));
    }
    return stems.join(' ');
}

// Handle messages
bot.on('message', async message => {
    try {
        // don't handle messages from bots
        if(message.author.bot) return;
        // don't handle direct messages
        // if(message.channel.type === "dm") return;

        console.log('===================================================');
    
        // user info from discord
        const uid = message.author.id;
        let nickname = '';
        try {
            nickname = message.member.nickname;
        } catch (error) {
            nickname = 'whisperer';
        }
        
        const username = message.author.username;
    
        // unused?
        bot.send = function(msg) {
            message.channel.send(msg)
        }

        // connection info
        const connection  = mysql.createConnection({
            host:       config.DB.host,
            user:       config.DB.user,
            password:   config.DB.password,
            database:   config.DB.host.database
        });

        // make MySQL query async-await
        const query = util.promisify(connection.query).bind(connection);
    
        // handle errors
        connection.on('error', function() {
            console.log('Connection cancelled due to timeout or another error');
        });

        // connect to database
        connection.connect(function(err) {
            if (err) {
                console.error('DB / database connection error: ' + err.stack);
                return;
            }
            console.log('DB / connected as id ' + connection.threadId);
        });

        // add user if needed ( may not handle nick change )
        await query(sql_add_user, [uid, username, nickname]);

        // get user info from DB
        const user_data = await query(sql_get_user_info, [uid]);
        console.log('User Data: ');
        console.log(user_data);

        if (user_data) {
            // User Data
            let coins = user_data[0]['coins'];
            let exp = user_data[0]['exp'];
            let lvl = user_data[0]['lvl'];
            let nickname = user_data[0]['server_name'];
            let username = user_data[0]['user_name'];
            let avatar = message.author.avatarURL;
            let question_num = user_data[0]['questions'];
            let question = null;
            let answer = null;
            
            // System command
            if(/^–Ω–æ–¥–∞$/i.test(message.content)){
                let randomNumber = Math.ceil(Math.random() * 10);
                switch(randomNumber){
                    case 1:
                        message.channel.send('–®–∏—Ç–æ?');
                        break;
                    case 2:
                        message.channel.send('–û—Ç—Å—Ç–∞–Ω—å, —è –∑–∞–Ω—è—Ç–∞...');
                        break;
                    case 3:
                        message.channel.send('–ù—É —à–æ —Ç–∞–∫–æ–µ?');
                        break;
                    case 4:
                        message.channel.send('–•–≤–∞—Ç–∏—Ç –º–µ–Ω—è –∑–≤–∞—Ç—å ._.');
                        break;
                    case 5:
                        message.channel.send('–í–∞—â–µ —Ç–æ –º–æ—ë –ø–æ–ª–Ω–æ–µ –∏–º—è - –ù–æ–¥–∞ —Ç—è–Ω');
                        break;
                    case 6:
                        message.channel.send('–ê—Å—å?');
                        break;
                    case 7:
                        message.channel.send('–®–æ –Ω–∞–¥–æ —Ç–æ?');
                        break;
                    case 8:
                        message.channel.send('–°–ª—É—à–∞—é:3');
                        break;
                    case 9:
                        message.channel.send('–ö–∞–∫ –±–∞–Ω–Ω—ã–π –ª–∏—Å—Ç –ø—Ä–∏—Å—Ç–∞–ª...');
                        break;
                }
            } else if(buy_question.test(message.content)){
                const shop = new RichEmbed()
                    .setTitle(`–ù–æ–¥–∞-—à–æ–ø!`)
                    .setColor(0xebe134)
                    .setDescription(`
                    –í–∞—à –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç: ${coins}
                    –ö—É–ø–∏—Ç—å –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å: 25 —á–µ–∫–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
                    –ö—É–ø–∏—Ç—å –ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å: 100 —á–µ–∫–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
    
                    –î–ª—è –ø–æ–∫—É–ø–∫–∏ –æ–±—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ: !–∫—É–ø–∏—Ç—å –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å
                    `);
                message.channel.send(shop);
            } else if(buy_common_question.test(message.content)){
                if(coins >= 25){
                    const commonQuestion = new RichEmbed()
                    .setTitle(`–ü–æ–∫—É–ø–∫–∞ –æ–±—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.`)
                    .setColor(0xebe134)
                    .setDescription(`
                    –í–∞—à –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç: ${coins}
                    –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ –ª—É—á—à–µ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–∞–∫ —à–∞–±–ª–æ–Ω:
                    !–≤–æ–ø—Ä–æ—Å [–¢—É—Ç –ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ—á–∫–∞—Ö] [–ê —Ç—É—Ç –≤–∞—à –æ—Ç–≤–µ—Ç, —Ç–∞–∫ –∂–µ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ—á–∫–∞—Ö]
                    `);
                    message.channel.send(commonQuestion);
                } else {
                    const commonQuestionFalse = new RichEmbed()
                    .setTitle(`–û—Ç–∫–∞–∑–∞–Ω–æ.`)
                    .setColor(0xFF0000)
                    .setDescription(`
                    –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —á–µ–∫–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç, –≤–∞—à –±–∞–ª–∞–Ω—Å: ${coins}
                    `);
                    message.channel.send(commonQuestionFalse);
                }   
            } else if(just_question.test(message.content)){
                let args = message.content.split(" [");
                if (coins >= 25 && args.length >= 2) {
                    coins -= 25;
                    question = args[1].slice(0, -1);
                    answer = args[2].slice(0, -1);
                    try {
                        question_type = parseInt(args[3].slice(0, -1));
                    } catch (error) {
                        question_type = 0;
                    }
                    question_num += 1;
                    const commonQuestionBye = new RichEmbed()
                    .setTitle(`–ü–æ–∫—É–ø–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞.`)
                    .setColor(0x36D904)
                    .setDescription(`
                    –í–∞—à –≤–æ–ø—Ä–æ—Å: ${question}
                    –í–∞—à –æ—Ç–≤–µ—Ç: ${answer}
                    –û—Å—Ç–∞–ª–æ—Å—å —á–µ–∫–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç: ${coins}
                    –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—èüòò
                    `);
                    message.channel.send(commonQuestionBye);
                } else {
                    message.channel.send(`–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —á–µ–∫–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç, –≤–∞—à –±–∞–ª–∞–Ω—Å: ${coins}`);
                }
            } else if (show_profile.test(message.content)) {
                if(message.member.nickname === null){
                    let embed = new RichEmbed()
                    .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞: ${username}`)
                    .setColor(0x0a4bff)
                    .setDescription(`
                    :trophy:LVL: ${lvl}
                    :jigsaw:XP: ${exp}
                    –ß–µ–∫–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç: ${coins} :moneybag:
                    :key:–û–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∫—É–ø–ª–µ–Ω–æ: ${question_num}
                    `)
                    .setThumbnail(avatar)
                    message.channel.send(embed);
                } else {
                    let embed = new RichEmbed()
                    .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞: ${nickname}`)
                    .setColor(0x0a4bff)
                    .setDescription(`
                    :trophy:LVL: ${lvl}
                    :jigsaw:XP: ${exp}
                    :moneybag:–ß–µ–∫–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç: ${coins}
                    :key:–û–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∫—É–ø–ª–µ–Ω–æ: ${question_num}
                    `)
                    .setThumbnail(avatar)
                    message.channel.send(embed);
                }
            } else if(message.content === '!–∫—É–±–∏–∫') {
                message.channel.send(Math.ceil(Math.random() * 10)); 
            } else {
                // "–ù–æ–¥–∞ ..."
                if (/^–ù–æ–¥–∞|^!/i.test(message.content)) {
                    // "–ù–æ–¥–∞ –¥–∞–π –º–æ–Ω–µ—Ç"
                    if (/–î–∞–π –º–æ–Ω–µ—Ç|–º–æ–Ω–µ—Ç–∫–∏/i.test(message.content)) {
                        // give 100 coins
                        coins += 99;
                        let pushCoins = new RichEmbed()
                        .setTitle(`–ó–∞–ø—Ä–æ—Å —Ö–∞–ª—è–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç–æ–∫`)
                        .setColor(0x36D904)
                        .setDescription(`
                        –î–µ—Ä–∂–∏ 100 –º–æ–Ω–µ—Ç–æ–∫ :moneybag:
                        –ß–µ–∫–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç: ${coins} 
                        `);
                        message.channel.send(pushCoins);
                    } else {
                        // find the closes questions in DB
                        matched_questions = await query(sql_find_question, [stemming(message.content)]);
                        // if questions exist
                        if(matched_questions) {
                            console.log('question_type :' + matched_questions[0]['type']);
                            // maximum score to float
                            let max_score = parseFloat(matched_questions[0]['score']);
                            let ans = '';
                            // if max score greater than 0
                            if(max_score > 0) {
                                // answer to user
                                ans = matched_questions[0]['answer'];
                            } else {
                                // no similar questions in DB
                                let randomNumber = Math.ceil(Math.random() * 5);
                                switch(randomNumber){
                                    case 1:
                                        ans = 'C–ª–æ–∂–Ω–æ, —Å–ª–æ–∂–Ω–æ, –Ω–∏**—è –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ.';
                                        break;
                                    case 2:
                                        ans = '–ß–µ–µ–µ–≥–æ *–ª—è—Ç—å?';
                                        break;
                                    case 3:
                                        ans = '–ù–∏**—è –Ω–µ –ø–æ–Ω—è–ª–∞, –Ω–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ:3';
                                        break;
                                    case 4:
                                        ans = '–ß–æ—Ç —è –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª–∞';
                                        break;
                                    case 5:
                                        ans = '–ê –º–æ–∂–Ω–æ –ø–æ–º–µ–¥–ª–µ–Ω–µ–µ? –Ø –∑–∞–ø–∏—Å—ã–≤–∞—é...';
                                        break;
                                }
                            }
                            // answer
                            message.channel.send(ans);
                        }
                        console.log('Matched questions');
                        console.log(matched_questions);
                    }
                }
                // update coins, exp and lvl
                coins += 1;
                exp += 1;
                if (exp >= lvl * 5) {
                    exp = 0;
                    lvl += 1;
                }
            }

            // update user info in DB
            await query(sql_upd_user_info, [coins, exp, lvl, question_num, uid]);
            // if the user created a question
            if (question && answer) {
                // add question to table questions
                var add_question = await query(sql_add_question, [stemming(question)]);
                var question_id = add_question.insertId;
    
                // add answer to table answers
                add_answer = await query(sql_add_answer, [answer]);
                var answer_id = add_answer.insertId;

                // link added question and added answer in table conn_quest_ans
                await query(sql_connect_question, [question_id, answer_id, uid, question_type]);

                // close connection to DB
                console.log('DB / disconnected');
                connection.end();
            } else {
                // close connection to DB
                console.log('DB / disconnected');
                connection.end();
            }
        }
    // handle errors
    } catch (error) {
        console.log(error);
        if(connection) {
            console.log('DB / disconnected');
            connection.end();
        }
         
    }
});


// –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫

// bot.on('guildMemberAdd', member => {
//     const channel = member.guild.channels.find(ch => ch.name === 'member-log');

//     if (!channel) return;
//     channel.send(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä, ${member}`);
// });

