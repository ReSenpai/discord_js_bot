//- require
const Discord = require('discord.js');
const config = require('./config.json');
const fs = require('fs');
const userLvl = require('./user_lvl.json');
const answers = require('./answers.json');
const mysql = require('mysql');
// const constructors = require('./functions/constructors.js');
const { Attachment, RichEmbed, Emoji, Guild, Client } = require('discord.js');

// - vars
const bot = new Discord.Client();
bot.commands = new Discord.Collection();
const token = config.token;
const prefix = config.prefix;
const connection  = mysql.createConnection({
    host: "localhost",
    user: "root",
    password: "",
    database: "mydb"
});

bot.login(token);

connection.connect(function(err) {
    if (err) {
        console.error('DB / database connection error: ' + err.stack);
        return;
    }
    console.log('DB / connected as id ' + connection.threadId);
});

fs.readdir('./modules/',(err,files)=>{
    if(err) console.log(err);
    let jsfiles = files.filter(f => f.split(".").pop() === "js");
    if(jsfiles.length <=0) console.log("–ù–µ—Ç –∫–æ–º–º–∞–Ω–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏!!");
    console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${jsfiles.length} –∫–æ–º–º–∞–Ω–¥`);
    jsfiles.forEach((f,i) =>{
        let props = require(`./modules/${f}`);
        console.log(`${i+1}.${f} –ó–∞–≥—Ä—É–∂–µ–Ω!`);
        for(let i = 0; i < props.help.name.length; i++){
            bot.commands.set(props.help.name[i],props);
            // console.log(props.help.name[i])
        }
        // console.log(props.help.name);
    });
});


// bot.on('ready', async () => {
//     console.log(`–ù–æ–¥–∞ —Ç—è–Ω –∑–∞–ø—É—â–µ–Ω–∞`);
//     bot.generateInvite(["ADMINISTRATOR"]).then(link => {
//         console.log(link);
//     }).catch(err => {
//         console.log(err.stack);
//     })
// });


// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–æ–∫–∞—á–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–∏—Å–∫–æ—Ä–¥–∞

bot.on('message', async message => {
    if(message.author.bot) return;
    if(message.channel.type === "dm") return;
    const uid = message.author.id;
    const nickname = message.member.nickname;
    const username = message.author.username;

    bot.send = function(msg) {
        message.channel.send(msg)
    }

    const sql_add_user = 
    `INSERT IGNORE INTO users (user_id, user_name, server_name)
        VALUES ('${uid}', '${username}', '${nickname}')`;

    console.log('sql_add_user:\n' + sql_add_user);

    connection.query(sql_add_user, function (error, results, fields) {
        // console.log('error: ' + error);
        // console.log(results);
        // console.log(fields);
    });

    const sql_get_user_info =
    `SELECT * FROM users
        WHERE user_id = '${uid}'`;

    
    connection.query(sql_get_user_info, function (error, results, fields) {
        if (results) {
            var coins = results[0]['coins'];
            var exp = results[0]['exp'];
            var lvl = results[0]['lvl'];
            var nickname = results[0]['server_name'];
            var username = results[0]['user_name'];

            if(/!–∫—É–ø–∏—Ç—å –≤–æ–ø—Ä–æ—Å$/i.test(message.content)){
                const shop = new RichEmbed()
                    .setTitle(`–ù–æ–¥–∞-—à–æ–ø!`)
                    .setColor(0xebe134)
                    .setDescription(`
                    –í–∞—à –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç: ${coins}
                    –ö—É–ø–∏—Ç—å –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å: 25 —á–µ–∫–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
                    –ö—É–ø–∏—Ç—å –ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å: 100 —á–µ–∫–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
    
                    –î–ª—è –ø–æ–∫—É–ø–∫–∏ –æ–±—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ: !–∫—É–ø–∏—Ç—å –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å
                    `);
                message.channel.send(shop);
            } else if(/!–∫—É–ø–∏—Ç—å –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å$/i.test(message.content)){
                if(coins >= 25){
                    const commonQuestion = new RichEmbed()
                    .setTitle(`–ü–æ–∫—É–ø–∫–∞ –æ–±—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.`)
                    .setColor(0xebe134)
                    .setDescription(`
                    –í–∞—à –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç: ${coins}
                    –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ –ª—É—á—à–µ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–∞–∫ —à–∞–±–ª–æ–Ω:
                    !–≤–æ–ø—Ä–æ—Å [–¢—É—Ç –ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ—á–∫–∞—Ö] [–ê —Ç—É—Ç –≤–∞—à –æ—Ç–≤–µ—Ç, —Ç–∞–∫ –∂–µ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ—á–∫–∞—Ö]
                    `);
                    message.channel.send(commonQuestion);
                } else {
                    const commonQuestionFalse = new RichEmbed()
                    .setTitle(`–û—Ç–∫–∞–∑–∞–Ω–æ.`)
                    .setColor(0xFF0000)
                    .setDescription(`
                    –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —á–µ–∫–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç, –≤–∞—à –±–∞–ª–∞–Ω—Å: ${coins}
                    `);
                    message.channel.send(commonQuestionFalse);
                }   
            } else if(/!–≤–æ–ø—Ä–æ—Å/i.test(message.content)){
                let args = message.content.split(" [");
                if(coins >= 25){
                    coins -= 25;
                    question = args[1].slice(0, args[1].length - 1);
                    answer = args[2].slice(0, args[2].length - 1);

                    const sql_add_question = 
                    `INSERT INTO questions (text)
                        VALUES ('${question}')`;
                    
                        const sql_add_answer = 
                    `INSERT INTO answers (text)
                        VALUES ('${answer}')`;

                        const sql_last_index = 
                    `SELECT LAST_INSERT_ID() AS last_index`;

                    var question_id = null;
                    var answer_id = null;
                    connection.query(sql_add_question, function (error, results, fields) {
                    //    console.log('error: ' + error);
                    //    console.log(results);
                    //    console.log(fields);
                    });

                    connection.query(sql_last_index, function (error, results, fields) {
                            console.log('results: ')
                            console.log(results);
                            console.log(results[0]['last_index']);
                            question_id = results[0]['last_index'];
                    });
                    console.log(question_id);
                    connection.query(sql_add_answer, function (error, results, fields) {
                    //    console.log('error: ' + error);
                    //    console.log(results);
                    //    console.log(fields);
                    });

                    connection.query(sql_last_index, function (error, results, fields) {
                        answer_id = results[0]['last_index'];
                    });

                    const sql_connect_question = 
                    `INSERT INTO conn_quest_ans (question_id, answer_id, user_id)
                        VALUES ('${question_id}', '${answer_id}', '${uid}');`;

                    connection.query(sql_connect_question, function (error, results, fields) {
                        console.log('error: ' + error);
                    //    console.log(results);
                    //    console.log(fields);
                    });

                    const commonQuestionBye = new RichEmbed()
                    .setTitle(`–ü–æ–∫—É–ø–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞.`)
                    .setColor(0x36D904)
                    .setDescription(`
                    –í–∞—à –≤–æ–ø—Ä–æ—Å: ${question}
                    –í–∞—à –æ—Ç–≤–µ—Ç: ${answer}
                    –û—Å—Ç–∞–ª–æ—Å—å —á–µ–∫–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç: ${coins}
                    –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—èüòò
                    `);
                    message.channel.send(commonQuestionBye);
                } else {
                    message.channel.send(`–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —á–µ–∫–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç, –≤–∞—à –±–∞–ª–∞–Ω—Å: ${coins}`);
                }
            } else {
                coins += 1;
                exp += 1;
                if (exp >= lvl * 5) {
                    exp = 0;
                    lvl += 1;
                }
            }

            const sql_upd_user_info = 
            `UPDATE users
                SET coins = '${coins}', exp = '${exp}', lvl = '${lvl}'
                WHERE user_id = '${uid}'`;
            connection.query(sql_upd_user_info, function (error, results, fields) {
                // console.log('error: ' + error);
                // console.log('users: ');
                // console.log(results);
            });

            // log users
            const sql_get_users = `SELECT * FROM users`
            console.log(sql_get_users);
            connection.query(sql_get_users, function (error, results, fields) {
                console.log('users: ');
                console.log(results);
            });

            // log users
            const sql_get_questions = `SELECT * FROM questions`
            console.log(sql_get_questions);
            connection.query(sql_get_questions, function (error, results, fields) {
                console.log('questions: ');
                console.log(results);
            });

            // log users
            const sql_get_answers = `SELECT * FROM answers`
            console.log(sql_get_answers);
            connection.query(sql_get_answers, function (error, results, fields) {
                console.log('answers: ');
                console.log(results);
            });

            // log users
            const sql_get_conn_quest = `SELECT * FROM conn_quest_ans`
            console.log(sql_get_conn_quest);
            connection.query(sql_get_conn_quest, function (error, results, fields) {
                console.log('conn_quest: ');
                console.log(results);
            });
        }
    });

    // sql_add_coins_exp = 
    // `UPDATE users
    //     SET coins = coins + 1, exp = exp + 1
    //     WHERE user_id = '${uid}'`;

    // console.log('sql_add_coins_exp:\n' + sql_add_coins_exp);

    // connection.query(sql_add_coins_exp, function (error, results, fields) {
    //     // console.log('error: ' + error);
    //     // console.log(results);
    //     // console.log(fields);
    // });

    // sql_upd_lvl =
    // `SELECT exp, lvl FROM users
    //     WHERE user_id = '${uid}'`;

    // connection.query(sql_upd_lvl, function (error, results, fields) {
    //     // console.log('error: ' + error);
    //     // console.log(results);
    //     // console.log(fields);
    //     if (results) {
    //         var exp = results[0]['exp'];
    //         var lvl = results[0]['lvl'];
    //         if(exp >= (lvl * 5)) {
    //             sql_lvl_up = 
    //             `UPDATE users
    //             SET lvl = lvl + 1, exp = 0
    //             WHERE user_id = '${uid}'`;
    //             connection.query(sql_lvl_up, function (error, results, fields) {
    //                 // console.log('error: ' + error);
    //                 // console.log(results);
    //                 // console.log(fields);
    //             });
    //         }
    //     }
    // });
    
    // if(message.channel.id === '677624287649333268' || message.channel.id === '678701864514224170' || message.channel.id === '624327775935004687') {
    //     if(/–ù–æ–¥–∞ –¥–∞–π –º–æ–Ω–µ—Ç–æ–∫$|!–º–æ–Ω–µ—Ç–∫–∏/i.test(message.content)){
    //         u.coins += 100;
    //         let pushCoins = new RichEmbed()
    //         .setTitle(`–ó–∞–ø—Ä–æ—Å —Ö–∞–ª—è–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç–æ–∫`)
    //         .setColor(0x36D904)
    //         .setDescription(`
    //         –î–µ—Ä–∂–∏ 100 –º–æ–Ω–µ—Ç–æ–∫ :moneybag:
    //         –ß–µ–∫–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç: ${userLvl[uid].coins} 
    //         `);
    //         message.channel.send(pushCoins);
    //     }
    // }
    
});


// –ë–ª–æ–∫ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –±–æ—Ç—É

/*bot.on('message', async message => {

    if(message.author.bot) return;

    bot.userlvl

    if(message.channel.id === '677624287649333268' || message.channel.id === '678701864514224170' || message.channel.id === '624327775935004687'){
        if (/–ù–æ–¥–∞$/i.test(message.content)) {
            if(message.author.id === '206808155890384898'){
                message.channel.send('–°–ª—É—à–∞—é –≤–∞—Å –æ –±–æ–∂–µ—Å—Ç–≤–æ');
            } else if(message.author.id === '124548144133308416') {
                message.channel.send('–î–∞, –≤–∞—à–µ –±–ª–∞–≥–æ—Ä–æ–¥–∏–µ?:3');
            } else {
                let randomNumber = Math.ceil(Math.random() * 10);
                switch(randomNumber){
                    case 1:
                        message.channel.send('–®–∏—Ç–æ?');
                        break;
                    case 2:
                        message.channel.send('–û—Ç—Å—Ç–∞–Ω—å, —è –∑–∞–Ω—è—Ç–∞...');
                        break;
                    case 3:
                        message.channel.send('–ù—É —à–æ —Ç–∞–∫–æ–µ?');
                        break;
                    case 4:
                        message.channel.send('–•–≤–∞—Ç–∏—Ç –º–µ–Ω—è –∑–≤–∞—Ç—å ._.');
                        break;
                    case 5:
                        message.channel.send('–í–∞—â–µ —Ç–æ –º–æ—ë –ø–æ–ª–Ω–æ–µ –∏–º—è - –ù–æ–¥–∞ —Ç—è–Ω');
                        break;
                    case 6:
                        message.channel.send('–ê—Å—å?');
                        break;
                    case 7:
                        message.channel.send('–®–æ –Ω–∞–¥–æ —Ç–æ?');
                        break;
                    case 8:
                        message.channel.send('–°–ª—É—à–∞—é:3');
                        break;
                    case 9:
                        message.channel.send('–ö–∞–∫ –±–∞–Ω–Ω—ã–π –ª–∏—Å—Ç –ø—Ä–∏—Å—Ç–∞–ª...');
                        break;
                }
            }
        }
        if (message.content === '–ù–æ–¥–∞ —Ç—è–Ω'){
            message.channel.send('–¢—ã –ø—Ä–æ—Å–∏—à—å, –Ω–æ –ø—Ä–æ—Å–∏—à—å –±–µ–∑ —É–≤–∞–∂–µ–Ω–∏—è:3')
        }
        if (message.content == '–û—Ç —Å—É—à–∫–∞') {
            message.channel.send('–ë–∞–Ω!! ._.')
        }
        if (message.content === '–ù–æ–¥–∞ –ø—Ä–∏–≤–µ—Ç') {
            message.channel.send('–ó–¥—Ä–∞—Å—å—Ç–µ:3');
        }
        if (message.content === '!–∫—É–±–∏–∫') {
            message.channel.send(Math.ceil(Math.random() * 10));
        }
        if (message.content === '–ù–æ–¥–∞ –ø–æ–ø—Ä–∞—â–∞–π—Å—è') {
            message.channel.send('–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ:3');
        }
        
        if (/!–ø—Ä–æ—Ñ–∏–ª—å$|–Ω–æ–¥–∞ –ø–æ–∫–∞–∂–∏ –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å/i.test(message.content)) {
            const uid = message.author.id;
            userLvl[uid].coins -= 1;
            const coinsIcon = new Attachment('./Gold_coin_icon.png');
    
            // console.log(message.member.nickname);
            // console.log(userLvl[uid].coins);
            // console.log(message.author)
    
            if(message.member.nickname === null){
                let embed = new RichEmbed()
                .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞: ${message.author.username}`)
                .setColor(0x0a4bff)
                .setDescription(`
                :trophy:LVL: ${userLvl[uid].lvl}
                :jigsaw:XP: ${userLvl[uid].xp}
                –ß–µ–∫–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç: ${userLvl[uid].coins} :moneybag:
                –û–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∫—É–ø–ª–µ–Ω–æ: ${answers[uid].answer.length}`)
                .setThumbnail(message.author.avatarURL)
                message.channel.send(embed);
            } else {
                let embed = new RichEmbed()
                .setTitle(`–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞: ${message.member.nickname}`)
                .setColor(0x0a4bff)
                .setDescription(`
                :trophy:LVL: ${userLvl[uid].lvl}
                :jigsaw:XP: ${userLvl[uid].xp}
                :moneybag:–ß–µ–∫–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç: ${userLvl[uid].coins}
                :key:–û–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∫—É–ø–ª–µ–Ω–æ: ${answers[uid].answer.length}`)
                .setThumbnail(message.author.avatarURL)
                message.channel.send(embed);
            }
        }
    
        for (var id in answers) {
            let counter = -1;
    
            for (var key in answers[id].question) {
                counter += 1;
                if(message.content === answers[id].question[counter]){
                    message.channel.send(answers[id].answer[counter])
                }
                // console.log(answers[id].question[counter])
            }
            
        }
    }

    
});*/

// –ü–æ–∫—É–ø–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–æ–¥—ã

/*bot.on('message', async message => {
    if(message.channel.id === '677624287649333268' || message.channel.id === '678701864514224170' || message.channel.id === '624327775935004687'){
        if(message.author.bot) return;
        if(message.channel.type === "dm") return;
        const uid = message.author.id;
        const u = userLvl[uid];


        fs.writeFile('./answers.json', JSON.stringify(answers), (err) => {
            if(err){
                console.log(err)
            }
        })
    }

    let messageArray = message.content.split(" ");
    let command = messageArray[0].toLowerCase();
    let args = messageArray.slice(1);
    if(!message.content.startsWith(prefix)) return;
    let cmd = bot.commands.get(command.slice(prefix.length));
    if(cmd) cmd.run(bot,message,args);
    bot.rUser = message.guild.member(message.mentions.users.first() || message.guild.members.get(args[0]));
    bot.uId = message.author.id;

    // console.log(cmd);


});*/


// –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫

// bot.on('guildMemberAdd', member => {
//     const channel = member.guild.channels.find(ch => ch.name === 'member-log');

//     if (!channel) return;
//     channel.send(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä, ${member}`);
// });


// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ



// bot.on('emojiCreate', async Emoji => {
//     console.log(Emoji);
// })

